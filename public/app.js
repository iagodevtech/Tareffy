(function(){
	const API_BASE = '/api';
	const state = { user: null, columns: [], tasksByColumn: {}, notifications: [], pusher: null, pusherChannel: null };
	function $(sel){ return document.querySelector(sel); }
	function el(tag, attrs={}, ...children){ const e=document.createElement(tag); Object.entries(attrs||{}).forEach(([k,v])=>{ if(k==='class') e.className=v; else if(k==='dataset'){Object.assign(e.dataset,v);} else if(k.startsWith('on')&&typeof v==='function') e.addEventListener(k.substring(2), v); else e.setAttribute(k,v); }); children.filter(Boolean).forEach(c=> e.appendChild(typeof c==='string'?document.createTextNode(c):c)); return e; }
	async function api(path, options={}){ const res = await fetch(`${API_BASE}${path}`, { credentials:'include', headers:{'Content-Type':'application/json'}, ...options, body: options.body ? JSON.stringify(options.body) : undefined }); if(!res.ok){ throw new Error((await res.text())||'Erro de API'); } const ct = res.headers.get('content-type')||''; return ct.includes('application/json')? res.json() : res.text(); }
	function route(){ const hash=location.hash||'#/login'; const path=hash.replace('#',''); document.querySelectorAll('.view').forEach(v=>v.classList.add('hidden')); switch(path.split('?')[0]){ case '/login': $('#view-login').classList.remove('hidden'); break; case '/register': $('#view-register').classList.remove('hidden'); break; case '/board': $('#view-board').classList.remove('hidden'); renderBoard(); break; case '/task': $('#view-task').classList.remove('hidden'); renderTaskDetails(); break; case '/notifications': $('#view-notifications').classList.remove('hidden'); renderNotifications(); break; case '/settings': $('#view-settings').classList.remove('hidden'); break; case '/team': $('#view-team').classList.remove('hidden'); break; default: location.hash = '#/login'; } }
	async function ensureSession(){ try{ const me = await api('/auth/me.php'); state.user = me.user||null; if(state.user && (!location.hash || location.hash==='#/login' || location.hash==='#/register')){ location.hash = '#/board'; } }catch{ state.user=null; if(location.hash!=='#/login'&&location.hash!=='#/register'){ location.hash='#/login'; } } }
	async function loadBoard(){ const data = await api('/board/get.php'); state.columns=data.columns; state.tasksByColumn=data.tasksByColumn; }
	function renderBoard(){ const board=$('#board'); board.innerHTML=''; state.columns.forEach(col=>{ const columnEl=el('div',{class:'column',draggable:'false','data-column-id':col.id}); const header=el('header',{}, el('strong',{},col.name), el('div',{}, el('button',{onclick:()=>renameColumn(col)},'Renomear'), el('button',{onclick:()=>deleteColumn(col.id)},'Excluir'))); const tasksEl=el('div',{class:'tasks','data-column-id':col.id, ondragover:onDragOver, ondrop:onDrop}); (state.tasksByColumn[col.id]||[]).forEach(task=>{ tasksEl.appendChild(renderTaskCard(task)); }); columnEl.appendChild(header); columnEl.appendChild(tasksEl); board.appendChild(columnEl); }); }
	function renderTaskCard(task){ const t=el('div',{class:'task',draggable:'true','data-task-id':task.id, ondragstart:onDragStart, ondragend:onDragEnd, onclick:()=>openTask(task.id)}, el('div',{},task.title), task.assignee_name? el('small',{},`@${task.assignee_name}`) : null ); return t; }
	function renderTaskDetails(){ const params=new URLSearchParams((location.hash.split('?')[1]||'')); const id=params.get('id'); const container=$('#taskDetails'); container.innerHTML='Carregando...'; if(!id){ container.textContent='ID inválido'; return; } api(`/tasks/get.php?id=${encodeURIComponent(id)}`).then(data=>{ container.innerHTML=''; container.appendChild(el('h2',{},data.task.title)); container.appendChild(el('p',{},data.task.description||'')); container.appendChild(el('div',{},`Coluna: ${data.task.column_name}`)); container.appendChild(el('div',{},`Responsável: ${data.task.assignee_name||'-'}`)); container.appendChild(el('button',{onclick:()=>{ location.hash='#/board'; }},'Voltar')); }).catch(()=>{ container.textContent='Erro ao carregar tarefa'; }); }
	function renderNotifications(){ const list=$('#notificationList'); list.innerHTML=''; (state.notifications||[]).forEach(n=>{ list.appendChild(el('li',{}, `${n.message} - ${new Date(n.created_at).toLocaleString()}`)); }); }
	let draggedTaskId=null; function onDragStart(ev){ const id=ev.currentTarget.dataset.taskId; draggedTaskId=id; ev.dataTransfer.effectAllowed='move'; ev.currentTarget.classList.add('dragging'); } function onDragEnd(ev){ ev.currentTarget.classList.remove('dragging'); draggedTaskId=null; } function onDragOver(ev){ ev.preventDefault(); ev.dataTransfer.dropEffect='move'; } async function onDrop(ev){ ev.preventDefault(); const columnId=ev.currentTarget.dataset.columnId; if(!draggedTaskId||!columnId) return; try{ await api('/tasks/move.php',{method:'POST',body:{taskId:draggedTaskId,toColumnId:columnId}}); await loadBoard(); renderBoard(); }catch{ alert('Falha ao mover tarefa'); } }
	$('#addColumnBtn')?.addEventListener('click', async ()=>{ const name=prompt('Nome da coluna'); if(!name) return; await api('/columns/create.php',{method:'POST',body:{name}}); await loadBoard(); renderBoard(); }); async function renameColumn(col){ const name=prompt('Novo nome',col.name); if(!name) return; await api('/columns/rename.php',{method:'POST',body:{id:col.id,name}}); await loadBoard(); renderBoard(); } async function deleteColumn(id){ if(!confirm('Excluir coluna?')) return; await api('/columns/delete.php',{method:'POST',body:{id}}); await loadBoard(); renderBoard(); }
	$('#addTaskBtn')?.addEventListener('click', async ()=>{ if(!state.columns.length){ alert('Crie uma coluna primeiro'); return; } const title=prompt('Título da tarefa'); if(!title) return; const toColumnId=state.columns[0].id; await api('/tasks/create.php',{method:'POST',body:{title,toColumnId}}); await loadBoard(); renderBoard(); }); function openTask(id){ location.hash = `#/task?id=${encodeURIComponent(id)}`; }
	$('#loginForm')?.addEventListener('submit', async (e)=>{ e.preventDefault(); const fd=new FormData(e.currentTarget); await api('/auth/login.php',{method:'POST',body:{email:fd.get('email'),password:fd.get('password')}}); await ensureSession(); await loadBoard(); location.hash='#/board'; initRealtime(); }); $('#registerForm')?.addEventListener('submit', async (e)=>{ e.preventDefault(); const fd=new FormData(e.currentTarget); await api('/auth/register.php',{method:'POST',body:{name:fd.get('name'),email:fd.get('email'),password:fd.get('password')}}); location.hash='#/login'; }); $('#logoutBtn')?.addEventListener('click', async ()=>{ await api('/auth/logout.php',{method:'POST'}); state.user=null; location.hash='#/login'; teardownRealtime(); });
	$('#settingsForm')?.addEventListener('submit', async (e)=>{ e.preventDefault(); const allowBrowser=$('#notifPermissionToggle').checked; const emailReminders=$('#emailRemindersToggle').checked; if(allowBrowser && window.Notification && Notification.permission!=='granted'){ await Notification.requestPermission(); } await api('/settings/update.php',{method:'POST',body:{allowBrowser,emailReminders}}); alert('Configurações salvas'); });
	$('#inviteForm')?.addEventListener('submit', async (e)=>{ e.preventDefault(); const fd=new FormData(e.currentTarget); await api('/team/invite.php',{method:'POST',body:{email:fd.get('invite')}}); alert('Convite enviado'); });
	async function pollNotifications(){ try{ const data=await api('/notifications/list.php'); const prevCount = state.notifications.length; state.notifications=data.notifications||[]; if(location.hash==='#/notifications') renderNotifications(); if(window.Notification && Notification.permission==='granted' && state.notifications.length>prevCount){ const latest=state.notifications[0]; if(latest) new Notification('TaskFlow', { body: latest.message }); } }catch{} setTimeout(pollNotifications,20000); }
	function teardownRealtime(){ if(state.pusherChannel){ state.pusherChannel.unbind_all(); state.pusherChannel.unsubscribe && state.pusherChannel.unsubscribe(); } if(state.pusher && state.pusher.disconnect) state.pusher.disconnect(); state.pusher=null; state.pusherChannel=null; }
	function initRealtime(){ teardownRealtime(); const key = window.TASKFLOW_PUSHER_KEY || ''; const cluster = window.TASKFLOW_PUSHER_CLUSTER || ''; if(!key||!cluster||!state.user) return; if(typeof Pusher==='undefined'){ const s=document.createElement('script'); s.src='https://js.pusher.com/8.2.0/pusher.min.js'; s.onload = subscribe; document.head.appendChild(s); } else { subscribe(); }
		function subscribe(){ if(!window.Pusher) return; state.pusher = new Pusher(key,{cluster,forceTLS:true}); const channelName = 'board-'+(state.columns[0]?.board_id||'default'); state.pusherChannel = state.pusher.subscribe(channelName); state.pusherChannel.bind('board_update', async ()=>{ await loadBoard(); renderBoard(); }); }
	}
	window.addEventListener('hashchange', route);
	(async function init(){ await ensureSession(); if(state.user){ await loadBoard(); } route(); pollNotifications(); initRealtime(); })();
})();