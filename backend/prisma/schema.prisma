// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  password          String
  avatar            String?
  role              UserRole  @default(MEMBER)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  emailVerificationToken String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  ownedProjects     Project[] @relation("ProjectOwner")
  projectMembers    ProjectMember[]
  tasks             Task[]
  assignedTasks     Task[] @relation("TaskAssignee")
  comments          Comment[]
  notifications     Notification[]
  events            Event[]
  teams             TeamMember[]
  ownedTeams        Team[] @relation("TeamOwner")
  pushSubscriptions PushSubscription[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  columns     Column[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Column {
  id        String   @id @default(cuid())
  name      String
  order     Int
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    Priority @default(MEDIUM)
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  estimatedHours Int?
  actualHours    Int?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columnId    String
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  parentTaskId String?
  parentTask   Task?   @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks    Task[]   @relation("SubTasks")
  comments    Comment[]
  attachments Attachment[]
  tags        TaskTag[]
  events      Event[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String
  createdAt DateTime @default(now())

  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())

  // Relations
  tasks     TaskTag[]

  @@map("tags")
}

model TaskTag {
  id        String   @id @default(cuid())

  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  isAllDay    Boolean  @default(false)
  location    String?
  recurrence  RecurrenceType?
  recurrenceRule String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id])

  @@map("events")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum TeamRole {
  OWNER
  MANAGER
  MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  COMMENT_ADDED
  PROJECT_INVITE
  TEAM_INVITE
  EVENT_REMINDER
  SYSTEM
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
